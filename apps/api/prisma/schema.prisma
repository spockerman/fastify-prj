// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Role {
  OWNER
  WAITER
  COSTUMER
  ADMIN
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  passwordHash       String?              @map("password_hash")
  avatarUrl          String?              @map("avatar_url")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  role               Role                 @default(COSTUMER)
  status             Status               @default(ACTIVE)
  tokens             Token[]
  orders             Order[]
  accounts           Account[]
  sessions           Session[]
  EstablishmentUsers EstablishmentUsers[]

  @@map("users")
}

model Establishment {
  id        String               @id @default(uuid())
  name      String
  avatarUrl String?              @map("avatar_url")
  status    Status               @default(ACTIVE)
  slug      String               @unique
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")
  menus     Menu[]
  orders    Order[]
  sessions  Session[]
  employees EstablishmentUsers[]

  @@map("establishments")
}

model EstablishmentUsers {
  id String @id @default(uuid())

  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String        @map("establishment_id")

  @@map("establishments_users")
}

model Session {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String        @map("establishment_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  endedAt         DateTime?     @map("ended_at")

  @@unique([userId, establishmentId])
  @@map("sessions")
}

model Order {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")

  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String        @map("establishment_id")
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  menuItem        MenuItem      @relation(fields: [menuItemId], references: [id])
  menuItemId      String        @map("menu_item_id")

  @@map("orders")
}

enum MenuType {
  FOOD
  DRINK
}

model Menu {
  id     String   @id @default(uuid())
  name   String
  type   MenuType
  status Status   @default(ACTIVE)

  establishment   Establishment  @relation(fields: [establishmentId], references: [id])
  establishmentId String         @map("establishment_id")
  menuMenuItens   MenuMenuItem[]

  @@map("menus")
}

enum MenuItemType {
  BEER
  WATER
  SODA
  DRINKS
  DISHES
  SNACKS
}

model MenuItem {
  id                  String         @id @default(uuid())
  name                String
  avatarUrl           String         @map("avatar_url")
  description         String
  price               Float
  status              Status         @default(ACTIVE)
  types               MenuItemType
  requiresPreparation Boolean        @default(false) @map("requires_Preparation")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  orders              Order[]
  menuMenuItens       MenuMenuItem[]

  @@map("menu_itens")
}

model MenuMenuItem {
  id         String   @id @default(uuid())
  menu       Menu     @relation(fields: [menuId], references: [id])
  menuId     String   @map("menu_id")
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String   @map("menu_item_id")

  @@map("menu_menu_itens")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
  GMAIL
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}
